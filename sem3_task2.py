"""
В большой текстовой строке подсчитать количество встречаемых
слов и вернуть 10 самых частых. Не учитывать знаки препинания
и регистр символов. За основу возьмите любую статью
из википедии или из документации к языку.
"""


def ten_popular(text: str) -> list[str]:
    delete = ".,!?;:-[]{}()="
    for i in delete:
        text = text.replace(i, "")
    text = text.lower()
    return sorted(set(text.split()), key=lambda x: text.count(x))[-10:]


print(ten_popular("Использование интерпретатора\
2.1 Вызов интерпретатора\
Если расположение исполняемого файла Python включено в пути поиска, то для его\
запуска достаточно набрать команду\
python\
Для выхода из интерпретатора необходимо набрать символ конца файла EOF (Ctrl-D\
в UNIX, Ctrl-Z в DOS и Windows) когда отображается первичное приглашение. Если\
это не работает, Вы можете набрать команду ‘import sys; sys.exit()’.\
Интерпретатор ведет себя подобно UNIX shell: если его стандартный ввод соединен\
с терминалом — читает и исполняет команды интерактивно; если он вызывается с\
именем файла в качестве аргумента или стандартный ввод интерпретатора ассоциирован\
с файлом, он считывает и исполняет команды из этого файла.\
Еще одним способом использования интерпретатора является вызов ‘python -c\
command [arg . . . ]’. В этом случае исполняются одна или несколько инструкций\
в команде command, аналогично использованию опции -c в UNIX shell. Так как инструкции в языке Python часто содержат пробелы, воспринимаемые как разделитель\
аргументов, а также другие специальные символы, лучше всего заключать command\
полностью в двойные кавычки.\
Следует заметить, что есть разница между ‘python file’ и ‘python < file’. В\
последнем случае, запросы на ввод, такие как input() и raw_input() будут удовлетворяться из файла. Так как файл уже будет прочитан, прежде чем программа начнет\
исполняться, программа немедленно получит EOF. В первом же случае (который Вам\
обычно и будет нужен), ввод осуществляется из устройства, с которым соединен стандартный ввод интерпретатора Python.\
Иногда бывает полезно после исполнения инструкций из файла перейти в интерактивный режим. Это можно сделать, передав параметр -i перед именем файла. (Такой\
способ не сработает, если чтение производится из стандартного ввода, по той же причине, которая описана в предыдущем абзаце.)\
Описание всех возможных параметров командной строки интерпретатора приведено в приложении A.\
20 Глава 2. Использование интерпретатора\
2.1.1 Передача аргументов\
Имя исполняемого файла (программы) и дополнительные аргументы передаются программе\
    в переменной sys.argv, которая является списком строк. Его длина (количество элементов в списке) всегда больше или равна единице. Имя программы хранится в\
sys.argv[0]. В интерактивном режиме sys.argv[0] содержит пустую строку. Если\
же имя программы передано как ‘-’ (имея в виду стандартный ввод) или интерпретатор запущен с опцией -c, то значение sys.argv[0] устанавливается в ’-’ и ’-c’\
соответственно. Все, что указывается после -c command не воспринимается как опции интерпретатором Python, а передается в sys.argv для обработки инструкциями в\
command.\
2.1.2 Интерактивный режим\
Когда команды считываются с терминала, говорят, что интерпретатор находится в интерактивном режиме. В этом режиме для ввода\
    последующих команд выводится первичное приглашение, обычно три знака больше (‘>>> ’); для продолжения ввода незаконченных \
    инструкций выводится вторичное приглашение, по умолчанию — три точки\
(‘... ’). При запуске в интерактивном режиме интерпретатор выводит приветственное\
сообщение — номер версии и замечания об авторском праве — перед выводом первичного приглашения, например:\
$ python\
Python 2.0 (#8, Oct 16 2000, 17:27:58) [MSC 32 bit\
(Intel)] on win32\
information.\
>>>\
Продолжение ввода незаконченных инструкций необходимо при вводе многострочных\
конструкций. В качестве примера, взгляните на инструкцию if:\
>>> the_world_is_flat = 1\
>>> # åÓÌÉ ÚÅÍÌÑ ÐÌÏÓËÁÑ, ×Ù×ÅÓÔÉ ÐÒÅÄÕÐÒÅÖÄÅÎÉÅ\
... if the_world_is_flat:\
...\
ïÓÔÏÒÏÖÎÏ, ÎÅ Ó×ÁÌÉÔÅÓØ!\
2.2. Интерпретатор и его среда 21\
2.2 Интерпретатор и его среда\
2.2.1 Обработка ошибок\
При возникновении ошибки интерпретатор печатает сообщение и остаток содержимого стека. В интерактивном \
    режиме, после этого снова выдается первичное приглашение. Если программа читается из файла, интерпретатор печатает сообщение об ошибке,\
остаток содержимого стека и выходит с ненулевым кодом завершения. (Исключения,\
перехваченные ветвью except в инструкции try, не являются ошибками в данном контексте.) Некоторые ошибки — внутренние противоречия и некоторые случаи нехватки\
памяти — являются безусловно фатальными и приводят к выходу с ненулевым значением. Все сообщения об ошибках выводятся в стандартный поток ошибок; нормальные\
сообщения, возникающие в процессе выполнения команд, направляются в стандартный\
поток вывода.\
Нажатие прерывающей комбинации клавиш (обычно Ctrl-C) во время выполнения\
генерирует исключение KeyboardInterrupt, которое может быть обработано с помощью инструкции try.\
2.2.2 Исполняемые файлы\
В операционных системах UNIX программу на языке Python можно сделать исполняемой\
непосредственно, поместив, например, строку\
#!/usr/bin/env python\
(подразумевая, что путь к интерпретатору включен в переменную окружения PATH\
пользователя) и установив разрешение на исполнение. Символы ‘#!’ должны быть первыми двумя символами файла. Заметьте, что символ ‘#’ в языке Python используется\
для обозначения комментария."))
